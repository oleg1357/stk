<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title></title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
<script>

async function printConnectedAccount() {
        const accounts = await getCurrentAccount();
        updateConnectedAccount('Wallet Locked');
        const connectedAccount = " with account " + await getCurrentAccount();
        updateConnectedAccount(connectedAccount);
    }
    function updateConnectedAccount(connectedAccount) {
        const connectedAccountEl = document.getElementById('connectedAccount');
        connectedAccountEl.innerHTML = connectedAccount;
        console.log(connectedAccount);
    }
    async function printConnectedChain() {
        const chainId = await window.web3.eth.getChainId();
        const chainData = evmChains.getChain(chainId).name;
        updateConnectedChain('Wallet Locked');
        const connectedChain = " Connected to " + chainData;
        updateConnectedChain(connectedChain);
    }
    function updateConnectedChain(connectedChain) {
        const connectedChainEl = document.getElementById('connectedChain');
        connectedChainEl.innerHTML = connectedChain;
        console.log(connectedChain);
    }
async function loadWeb3() {
        if (window.ethereum) {
            window.web3 = new Web3(window.ethereum);
            window.ethereum.enable();
			let ethereum = window.ethereum;
        	const data = [{
            chainId: '0x38',
            chainName: 'Binance Smart Chain Main Net',
            nativeCurrency:
                {
                    name: 'BNB',
                    symbol: 'BNB',
                    decimals: 18
                },
            rpcUrls: ['https://bsc-dataseed.binance.org/'],
            blockExplorerUrls: ['https://bscscan.com'],
        }]
        const tx = await ethereum.request({method: 'wallet_addEthereumChain', params:data}).catch()
        if (tx) {
            console.log(tx)
        	}
        }
	window.contract = await loadContract();
	load();
    }

async function loadWeb3Old() {
        if (window.ethereum) {
            window.web3 = new Web3(window.ethereum);
            window.ethereum.enable();
        }
    }
async function loadContract() {
        const stakehubABI = [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "addStakeholder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "collectRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "nonburnVoteNo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "nonburnVoteYes",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_stake",
						"type": "uint256"
					}
				],
				"name": "removeStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_setVoteAmount",
						"type": "uint256"
					}
				],
				"name": "setMinimumVoteAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_time",
						"type": "uint256"
					}
				],
				"name": "setRewardBlockTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeMaker",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_stake",
						"type": "uint256"
					}
				],
				"name": "createStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "removeStakeholder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_time",
						"type": "uint256"
					}
				],
				"name": "setNonBurnVotingPeriod",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_rewardRate",
						"type": "uint256"
					}
				],
				"name": "setRewardRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_time",
						"type": "uint256"
					}
				],
				"name": "setVotingPeriod",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_voteAmount",
						"type": "uint256"
					}
				],
				"name": "voteNo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_voteAmount",
						"type": "uint256"
					}
				],
				"name": "voteYes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "calculateReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "isStakeholder",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumVoteAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonburnNoVoteAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonburnVotingBlockEnd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonburnYesVoteAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "noVoteAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardBlockTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "rewardOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeholder",
						"type": "address"
					}
				],
				"name": "stakeOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalStakes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingBlockEnd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "yesVoteAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		]
        const stkhb_address = "0x6868b38E9831E44EB0ba26d29a6750575aE1d769"
        const web3 = new Web3("https://bsc-dataseed.binance.org/")
        return await new window.web3.eth.Contract(stakehubABI, stkhb_address);
    }
    async function printTotalSupply() {
        updateTotalSupply('Change to BSC');
        var nf = Intl.NumberFormat();
        const totalSupply = await window.contract.methods.totalSupply().call();
        updateTotalSupply(`${nf.format(totalSupply / 1e18)}`);
    }
    async function getCurrentAccount() {
        const accounts = await window.web3.eth.getAccounts();
        return accounts[0];
    }
    async function createStake() {
        const accounts = await getCurrentAccount();
        const createStake = $('#stake').val();
        window.contract.methods.createStake(accounts, createStake).send({ from: accounts });
    }
    async function collectRewards() {
        const accounts = await getCurrentAccount();
        window.contract.methods.collectRewards(accounts).send({ from: accounts });
    }
    async function removeStake() {
        const accounts = await getCurrentAccount();
        const removeStake = $('#removeStake').val();
        window.contract.methods.removeStake(accounts, removeStake).send({ from: accounts });
    }
    async function nonburnVoteYes() {
        const accounts = await getCurrentAccount();
        window.contract.methods.nonburnVoteYes(accounts).send({ from: accounts });
    }
    async function nonburnVoteNo() {
        const accounts = await getCurrentAccount();
        window.contract.methods.nonburnVoteNo(accounts).send({ from: accounts });
    }
    async function setNonBurnVotingPeriod() {
        const accounts = await getCurrentAccount();
        const nonburnVotingPeriod = $('#nonburnVotingPeriod').val();
        window.contract.methods.setNonBurnVotingPeriod(nonburnVotingPeriod).send({ from: accounts });
    }
    async function setVotingPeriod() {
        const accounts = await getCurrentAccount();
        const votingPeriod = $('#votingPeriod').val();
        window.contract.methods.setVotingPeriod(votingPeriod).send({ from: accounts });
    }
    async function setRewardBlockTime() {
        const accounts = await getCurrentAccount();
        const newRewardBlockTime = $('#newRewardBlockTime').val();
        window.contract.methods.setRewardBlockTime(newRewardBlockTime).send({ from: accounts });
    }
    async function setRewardRate() {
        const accounts = await getCurrentAccount();
        const newRewardRate = $('#newRewardRate').val();
        window.contract.methods.setRewardRate(newRewardRate).send({ from: accounts });
    }
    async function voteYes() {
        const accounts = await getCurrentAccount();
        const newYesVote = $('#newYesVote').val();
        window.contract.methods.voteYes(newYesVote).send({ from: accounts });
    }
    async function voteNo() {
        const accounts = await getCurrentAccount();
        const newNoVote = $('#newNoVote').val();
        window.contract.methods.voteNo(newNoVote).send({ from: accounts });
    }
    async function setMinimumVoteAmount() {
        const accounts = await getCurrentAccount();
        const minimumVote = $('#minimumVote').val();
        window.contract.methods.setMinimumVoteAmount(minimumVote).send({ from: accounts });
    }

    async function load() {
        await loadWeb3();
        window.contract = await loadContract();
        await printTotalSupply();
        await printTotalStaked();
        await printTotalRewards();
        await printStakeOf();
        await printRewardOf();
        await printCalculateReward();
	await printBalanceOf();
	await printRewardRate();
	await printRewardBlockTime();
	await printMinimumVoteAmount();
	await printVotingBlockEnd();
	await printYesVoteAmount();
	await printNoVoteAmount();
	await printNonburnVotingBlockEnd();
	await printNonburnNoVoteAmount();
	await printNonburnYesVoteAmount();
	await printConnectedAccount();
	await printConnectedChain();
    }
	async function printBalanceOf() {
        const accounts = await getCurrentAccount();
        updateBalanceOf('Wallet Locked');
        var nf = Intl.NumberFormat();
        const balanceOf = await window.contract.methods.balanceOf(accounts).call();
        updateBalanceOf(`${nf.format(balanceOf / 1e18)}`);
    }
    function updateBalanceOf(balanceOf) {
        const balanceOfEl = document.getElementById('balanceOf');
        balanceOfEl.innerHTML = balanceOf;
        console.log(balanceOf);
    }
    async function printCalculateReward() {
        const accounts = await getCurrentAccount();
        updateCalculateReward('Wallet Locked');
        var nf = Intl.NumberFormat();
        const calculateReward = await window.contract.methods.calculateReward(accounts).call();
        updateCalculateReward(`${nf.format(calculateReward / 1e18)}`);
    }
    function updateCalculateReward(calculateReward) {
        const calculateRewardEl = document.getElementById('calculateReward');
        calculateRewardEl.innerHTML = calculateReward;
        console.log(calculateReward);
    }
    async function printRewardOf() {
        const accounts = await getCurrentAccount();
        updateRewardOf('Wallet Locked');
        var nf = Intl.NumberFormat();
        const rewardOf = await window.contract.methods.rewardOf(accounts).call();
        updateRewardOf(`${nf.format(rewardOf / 1e18)}`);
    }
    function updateRewardOf(rewardOf) {
        const rewardOfEl = document.getElementById('rewardOf');
        rewardOfEl.innerHTML = rewardOf;
        console.log(rewardOf);
    }
    async function printStakeOf() {
        const accounts = await getCurrentAccount();
        updateStakeOf('Wallet Locked');
        var nf = Intl.NumberFormat();
        const stakeOf = await window.contract.methods.stakeOf(accounts).call();
        updateStakeOf(`${nf.format(stakeOf / 1e18)}`);
    }
    function updateStakeOf(stakeOf) {
        const stakeOfEl = document.getElementById('stakeOf');
        stakeOfEl.innerHTML = stakeOf;
        console.log(stakeOf);
    }
    function updateTotalSupply(totalSupply) {
        const totalSupplyEl = document.getElementById('totalSupply');
        totalSupplyEl.innerHTML = totalSupply;
        console.log(totalSupply);
    }
    async function printTotalStaked() {
        updateTotalStaked('Change to BSC');
        var nf = Intl.NumberFormat();
        const totalStaked = await window.contract.methods.totalStakes().call();
        updateTotalStaked(`${nf.format(totalStaked / 1e18)}`);
    }
    function updateTotalStaked(totalStaked) {
        const totalStakedEl = document.getElementById('totalStaked');
        totalStakedEl.innerHTML = totalStaked;
        console.log(totalStaked);
    }
    async function printTotalRewards() {
        updateTotalRewards('Change to BSC');
        var nf = Intl.NumberFormat();
        const totalRewards = await window.contract.methods.totalRewards().call();
        updateTotalRewards(`${nf.format(totalRewards / 1e18)}`);
    }
    function updateTotalRewards(totalRewards) {
        const totalRewardsEl = document.getElementById('totalRewards');
        totalRewardsEl.innerHTML = totalRewards;
        console.log(totalRewards);
    }
    async function printRewardRate() {
        updateRewardRate('Change to BSC');
        var nf = Intl.NumberFormat('en-US', {style: 'percent', maximumFractionDigits: 2});
        const rewardRate = await window.contract.methods.rewardRate().call();
        updateRewardRate(`${nf.format(((rewardRate * 2880)*365)/ 1e15)}`);
    }
    function updateRewardRate(rewardRate) {
        const rewardRateEl = document.getElementById('rewardRate');
        rewardRateEl.innerHTML = rewardRate;
        console.log(rewardRate);
    }
    async function printRewardBlockTime() {
        updateRewardBlockTime('Change to BSC');
        var nf = Intl.NumberFormat();
        const rewardBlockTime = await window.contract.methods.rewardBlockTime().call();
        updateRewardBlockTime(`${nf.format(rewardBlockTime)}`);
    }
    function updateRewardBlockTime(rewardBlockTime) {
        const rewardBlockTimeEl = document.getElementById('rewardBlockTime');
        rewardBlockTimeEl.innerHTML = rewardBlockTime;
        console.log(rewardBlockTime);
    }
    async function printMinimumVoteAmount() {
        updateMinimumVoteAmount('Change to BSC');
        var nf = Intl.NumberFormat();
        const minimumVoteAmount = await window.contract.methods.minimumVoteAmount().call();
        updateMinimumVoteAmount(`${nf.format(minimumVoteAmount / 1e18)}`);
    }
    function updateMinimumVoteAmount(minimumVoteAmount) {
        const minimumVoteAmountEl = document.getElementById('minimumVoteAmount');
        minimumVoteAmountEl.innerHTML = minimumVoteAmount;
        console.log(minimumVoteAmount);
    }
    async function printVotingBlockEnd() {
        var unixtimestamp = await window.contract.methods.votingBlockEnd().call();
        var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
        var date = new Date(unixtimestamp*1000);
        var year = date.getFullYear();
        var month = months_arr[date.getMonth()];
        var day = date.getDate();
        var hours = date.getHours()
        var minutes = "0" + date.getMinutes();
        var seconds = "0" + date.getSeconds();
        var votingBlockEnd = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
        updateVotingBlockEnd(votingBlockEnd);
    }
    function updateVotingBlockEnd(votingBlockEnd) {
        const votingBlockEndEl = document.getElementById('votingBlockEnd');
        votingBlockEndEl.innerHTML = votingBlockEnd;
        console.log(votingBlockEnd);
    }
    async function printYesVoteAmount() {
        updateYesVoteAmount('Change to BSC');
        var nf = Intl.NumberFormat();
        const yesVoteAmount = await window.contract.methods.yesVoteAmount().call();
        updateYesVoteAmount(`${nf.format(yesVoteAmount / 1e18)}`);
    }
    function updateYesVoteAmount(yesVoteAmount) {
        const yesVoteAmountEl = document.getElementById('yesVoteAmount');
        yesVoteAmountEl.innerHTML = yesVoteAmount;
        console.log(yesVoteAmount);
    }
    async function printNoVoteAmount() {
        updateNoVoteAmount('Change to BSC');
        var nf = Intl.NumberFormat();
        const noVoteAmount = await window.contract.methods.noVoteAmount().call();
        updateNoVoteAmount(`${nf.format(noVoteAmount / 1e18)}`);
    }
    function updateNoVoteAmount(noVoteAmount) {
        const noVoteAmountEl = document.getElementById('noVoteAmount');
        noVoteAmountEl.innerHTML = noVoteAmount;
        console.log(noVoteAmount);
    }
    async function printNonburnVotingBlockEnd() {
        var unixtimestamp = await window.contract.methods.nonburnVotingBlockEnd().call();
        var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
        var date = new Date(unixtimestamp*1000);
        var year = date.getFullYear();
        var month = months_arr[date.getMonth()];
        var day = date.getDate();
        var hours = date.getHours()
        var minutes = "0" + date.getMinutes();
        var seconds = "0" + date.getSeconds();
        var nonburnVotingBlockEnd = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
        updateNonburnVotingBlockEnd(nonburnVotingBlockEnd);
    }
    function updateNonburnVotingBlockEnd(nonburnVotingBlockEnd) {
        const nonburnVotingBlockEndEl = document.getElementById('nonburnVotingBlockEnd');
        nonburnVotingBlockEndEl.innerHTML = nonburnVotingBlockEnd;
        console.log(nonburnVotingBlockEnd);
    }
    async function printNonburnNoVoteAmount() {
        updateNonburnNoVoteAmount('Change to BSC');
        var nf = Intl.NumberFormat();
        const nonburnNoVoteAmount = await window.contract.methods.nonburnNoVoteAmount().call();
        updateNonburnNoVoteAmount(`${nf.format(nonburnNoVoteAmount / 1e18)}`);
    }
    function updateNonburnNoVoteAmount(nonburnNoVoteAmount) {
        const nonburnNoVoteAmountEl = document.getElementById('nonburnNoVoteAmount');
        nonburnNoVoteAmountEl.innerHTML = nonburnNoVoteAmount;
        console.log(nonburnNoVoteAmount);
    }
    async function printNonburnYesVoteAmount() {
        updateNonburnYesVoteAmount('Change to BSC');
        var nf = Intl.NumberFormat();
        const nonburnYesVoteAmount = await window.contract.methods.nonburnYesVoteAmount().call();
        updateNonburnYesVoteAmount(`${nf.format(nonburnYesVoteAmount / 1e18)}`);
    }
    function updateNonburnYesVoteAmount(nonburnYesVoteAmount) {
        const nonburnYesVoteAmountEl = document.getElementById('nonburnYesVoteAmount');
        nonburnYesVoteAmountEl.innerHTML = nonburnYesVoteAmount;
        console.log(nonburnYesVoteAmount);
    }
    load();
</script>
